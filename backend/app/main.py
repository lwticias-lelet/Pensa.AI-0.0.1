from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os
import logging
from groq import Groq

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Pensa.AI Backend",
    description="API para chatbot educacional",
    version="1.0.0"
)

# CORS CONFIGURADO
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ChatRequest(BaseModel):
    question: str

class ChatResponse(BaseModel):
    answer: str

# Cliente Groq global
groq_client = None
sistema_inicializado = False

def verificar_groq_key():
    """Verifica se a GROQ_API_KEY est√° configurada"""
    groq_key = os.getenv("GROQ_API_KEY")
    if not groq_key:
        logger.error("‚ùå GROQ_API_KEY n√£o encontrada!")
        return False
    
    logger.info("‚úÖ GROQ_API_KEY encontrada")
    return True

def inicializar_groq():
    """Inicializa cliente Groq"""
    global groq_client, sistema_inicializado
    
    if sistema_inicializado:
        return True
    
    try:
        groq_key = os.getenv("GROQ_API_KEY")
        if not groq_key:
            return False
        
        groq_client = Groq(api_key=groq_key)
        
        # Teste r√°pido
        response = groq_client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[{"role": "user", "content": "teste"}],
            max_tokens=10
        )
        
        sistema_inicializado = True
        logger.info("‚úÖ Sistema Groq inicializado com sucesso!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar Groq: {str(e)}")
        return False

@app.on_event("startup")
async def startup_event():
    """Evento executado na inicializa√ß√£o do servidor"""
    logger.info("üöÄ Iniciando Pensa.AI Backend...")
    
    if inicializar_groq():
        logger.info("‚úÖ Backend pronto para uso!")
    else:
        logger.warning("‚ö†Ô∏è Backend iniciado com funcionalidade limitada")

@app.get("/")
async def root():
    return {
        "message": "Pensa.AI Backend est√° funcionando!", 
        "status": "online",
        "environment": "production" if os.getenv("RENDER") else "development"
    }

@app.get("/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de do sistema"""
    status = {
        "status": "healthy",
        "groq_configured": verificar_groq_key(),
        "sistema_inicializado": sistema_inicializado,
        "environment": "production" if os.getenv("RENDER") else "development"
    }
    return status

def gerar_resposta_educacional(pergunta):
    """Gera resposta educacional usando Groq diretamente"""
    
    prompt = f"""
üéì VOC√ä √â O PENSA.AI - TUTOR EDUCACIONAL ESPECIALISTA

MISS√ÉO: Ensinar detalhadamente com exemplos, mas SEM dar o resultado final.

PERGUNTA DO ESTUDANTE: {pergunta}

RESPONDA SEGUINDO ESTA ESTRUTURA:

üéØ AN√ÅLISE: [Tipo de problema e conceitos envolvidos]

üìö CONCEITOS: [Defini√ß√µes claras e aplica√ß√µes]

üìê F√ìRMULAS: [F√≥rmulas necess√°rias com explica√ß√£o]

üõ†Ô∏è M√âTODO PASSO A PASSO:
Passo 1: [O que fazer]
Passo 2: [Pr√≥xima etapa]
[Continue conforme necess√°rio]

üìù EXEMPLO RESOLVIDO:
[Problema similar com resolu√ß√£o completa]

üîÑ VERIFICA√á√ÉO: [Como conferir resultados]

üéØ PARA SEU PROBLEMA: [Orienta√ß√£o espec√≠fica SEM resolver]

IMPORTANTE: D√™ exemplos COMPLETOS, mas N√ÉO resolva o problema espec√≠fico perguntado.
"""

    try:
        response = groq_client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=2048,
            temperature=0.3
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"Erro no Groq: {e}")
        return f"""
üéì RESPOSTA EDUCACIONAL PARA: {pergunta}

üìö METODOLOGIA GERAL:
1. Identifique o tipo de problema
2. Liste dados conhecidos e inc√≥gnitas  
3. Escolha a estrat√©gia adequada
4. Execute passo a passo
5. Verifique o resultado

üí° DICA: Aplique esta metodologia sistem√°tica no seu problema!
        """

@app.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """Endpoint para chat com o assistente"""
    
    if not request.question.strip():
        raise HTTPException(status_code=400, detail="Campo 'question' n√£o pode estar vazio")
    
    logger.info(f"üí¨ Pergunta recebida: {request.question[:50]}...")
    
    try:
        if not sistema_inicializado:
            resposta = f"""
üéì SISTEMA PENSA.AI - MODO LIMITADO

‚ö†Ô∏è O sistema completo n√£o est√° dispon√≠vel no momento.

PARA SUA PERGUNTA: "{request.question}"

üìö ORIENTA√á√ÉO GERAL:
1. üîç IDENTIFIQUE o tipo de problema
2. üìñ ESTUDE os conceitos fundamentais  
3. üßÆ APLIQUE as f√≥rmulas adequadas
4. ‚úÖ VERIFIQUE o resultado

Configure a GROQ_API_KEY para funcionalidade completa!
            """
        else:
            resposta = gerar_resposta_educacional(request.question)
        
        logger.info("‚úÖ Resposta gerada com sucesso")
        return ChatResponse(answer=resposta)
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao processar pergunta: {str(e)}")
        
        resposta = f"""
‚ùå ERRO NO PROCESSAMENTO

Pergunta: {request.question}

üéì M√âTODO GERAL DE RESOLU√á√ÉO:
1. Leia e compreenda o problema
2. Identifique conceitos necess√°rios  
3. Aplique f√≥rmulas e m√©todos
4. Verifique o resultado

Erro t√©cnico: {str(e)[:100]}
        """
        
        return ChatResponse(answer=resposta)

@app.post("/upload")
async def upload_pdf(file: UploadFile = File(...)):
    """Upload de arquivo - funcionalidade b√°sica"""
    
    if not file.filename.lower().endswith(".pdf"):
        raise HTTPException(status_code=400, detail="Apenas arquivos PDF s√£o aceitos.")
    
    return {
        "filename": file.filename,
        "message": "Arquivo recebido! Funcionalidade de indexa√ß√£o ser√° implementada em breve."
    }