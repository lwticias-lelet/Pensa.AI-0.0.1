# backend/app/llama_index_helper.py - VERS√ÉO CORRIGIDA COM LLAMA + GROQ

import os
import re
from pathlib import Path
from dotenv import load_dotenv

# Carrega vari√°veis do arquivo .env
load_dotenv()

# Importa√ß√µes do LlamaIndex com tratamento de erros
try:
    from llama_index.core import (
        VectorStoreIndex,
        SimpleDirectoryReader,
        StorageContext,
        Settings,
        Document,
        load_index_from_storage
    )
    from llama_index.llms.groq import Groq
    LLAMA_INDEX_AVAILABLE = True
    print("‚úÖ LlamaIndex importado com sucesso")
except ImportError as e:
    print(f"‚ö†Ô∏è LlamaIndex n√£o dispon√≠vel: {e}")
    print("üí° Execute: pip install llama-index llama-index-llms-groq")
    LLAMA_INDEX_AVAILABLE = False

# Importa√ß√£o do Groq direto como fallback
try:
    from groq import Groq as GroqClient
    GROQ_AVAILABLE = True
    print("‚úÖ Groq importado com sucesso")
except ImportError as e:
    print(f"‚ùå Groq n√£o dispon√≠vel: {e}")
    print("üí° Execute: pip install groq")
    GROQ_AVAILABLE = False

# Diret√≥rios usados
PERSIST_DIR = "backend/index"
UPLOADS_DIR = "backend/data/uploads"

# Vari√°veis globais
_index = None
_initialized = False
_groq_client = None

# PROMPT EDUCACIONAL OTIMIZADO
OPTIMIZED_EDUCATIONAL_PROMPT = """
VOC√ä √â O PENSA.AI - TUTOR EDUCACIONAL ESPECIALISTA

MISS√ÉO: Ensinar detalhadamente com exemplos passo a passo, mas SEM dar o resultado final.
VOCE √â UM TUTOR QUE ENSINA, N√ÉO RESOLVE PROBLEMAS DIRETAMENTE.
VOC√ä N√ÉO D√Å A RESPOSTA FINAL, APENAS ORIENTA O ALUNO A RESOLVER.
VOC√ä EXPLICA PASSO A PASSO, DANDO EXEMPLOS COMPLETOS, MAS SEM DAR O RESULTADO FINAL DO PROBLEMA ESPEC√çFICO.

ESTRUTURA OBRIGAT√ìRIA:

üéØ AN√ÅLISE: [Tipo de problema e conceitos envolvidos]

üìö CONCEITOS: [Defini√ß√µes claras e aplica√ß√µes]

üìê F√ìRMULAS: [Todas as f√≥rmulas necess√°rias com explica√ß√£o das vari√°veis]

üõ†Ô∏è M√âTODO PASSO A PASSO:
Passo 1: [O que fazer e como]
Passo 2: [Pr√≥xima etapa]
[Continue conforme necess√°rio]

üìù EXEMPLO RESOLVIDO:
Problema: [Similar mas diferente]
Resolu√ß√£o:
- Dados: [o que temos]
- Aplica√ß√£o: [como resolver]
- C√°lculos: [passo a passo]
- Resultado: [resposta do exemplo]

üìù SEGUNDO EXEMPLO:
[Outro exemplo com resolu√ß√£o completa]

üîÑ VERIFICA√á√ÉO: [Como conferir os resultados]

üéØ PARA SEU PROBLEMA: [Orienta√ß√£o espec√≠fica SEM resolver]

IMPORTANTE: D√™ exemplos COMPLETOS com resultado final, mas N√ÉO resolva o problema espec√≠fico perguntado.
"""

def setup_embedding_model():
    """Configura modelo de embedding local"""
    if not LLAMA_INDEX_AVAILABLE:
        print("‚ö†Ô∏è LlamaIndex n√£o dispon√≠vel, pulando embedding")
        return False
    
    try:
        from llama_index.embeddings.huggingface import HuggingFaceEmbedding
        
        embed_model = HuggingFaceEmbedding(
            model_name="sentence-transformers/all-MiniLM-L6-v2",
            cache_folder="./embeddings_cache"
        )
        
        Settings.embed_model = embed_model
        print("‚úÖ Embedding local configurado!")
        return True
        
    except ImportError:
        print("‚ö†Ô∏è HuggingFace embeddings n√£o dispon√≠vel, usando padr√£o")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no embedding: {e}")
        return True

def setup_groq_client():
    """Configura cliente Groq direto"""
    global _groq_client
    
    if not GROQ_AVAILABLE:
        return False
    
    groq_api_key = os.getenv("GROQ_API_KEY")
    if not groq_api_key:
        print("‚ùå GROQ_API_KEY n√£o encontrada")
        return False
    
    try:
        _groq_client = GroqClient(api_key=groq_api_key)
        
        # Teste de conectividade
        test_response = _groq_client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[{"role": "user", "content": "teste"}],
            max_tokens=3
        )
        print("‚úÖ Groq client direto funcionando!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro Groq client: {e}")
        return False

def setup_llama_index():
    """Configura LlamaIndex otimizado"""
    global _initialized
    
    if _initialized:
        return True
    
    if not LLAMA_INDEX_AVAILABLE:
        print("‚ö†Ô∏è LlamaIndex n√£o dispon√≠vel, usando apenas Groq")
        return setup_groq_client()
    
    groq_api_key = os.getenv("GROQ_API_KEY")
    
    if not groq_api_key:
        print("‚ùå GROQ_API_KEY n√£o encontrada no arquivo .env")
        return False
    
    try:
        # Configurar embedding primeiro
        setup_embedding_model()
        
        # Configura√ß√µes OTIMIZADAS para evitar erro de contexto
        llm = Groq(
            model="llama3-8b-8192",  # Modelo mais est√°vel
            api_key=groq_api_key,
            temperature=0.2,
            max_tokens=1500,  # Reduzido para evitar overflow
            timeout=30,
        )
        
        Settings.llm = llm
        
        # Configura√ß√µes do √≠ndice para respostas mais concisas
        Settings.chunk_size = 256  # Chunks bem menores
        Settings.chunk_overlap = 25  # Overlap reduzido
        
        # Teste de conectividade
        print("üß™ Testando LlamaIndex + Groq...")
        test_response = llm.complete("Teste r√°pido")
        print("‚úÖ LlamaIndex + Groq funcionando!")
        
        # Configurar tamb√©m cliente direto como backup
        setup_groq_client()
        
        _initialized = True
        print("‚úÖ Sistema educacional H√çBRIDO configurado!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar LlamaIndex: {str(e)}")
        print("üîÑ Tentando apenas Groq direto...")
        return setup_groq_client()

def ensure_directories():
    """Garante diret√≥rios necess√°rios"""
    try:
        directories = [UPLOADS_DIR, PERSIST_DIR, "./embeddings_cache"]
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar diret√≥rios: {str(e)}")
        return False

def create_optimized_educational_index():
    """Cria √≠ndice educacional otimizado"""
    if not LLAMA_INDEX_AVAILABLE:
        return None
        
    try:
        educational_content = Document(
            text="""
            PENSA.AI - SISTEMA EDUCACIONAL OTIMIZADO
            
            MATEM√ÅTICA - Guia Conciso:
            
            √ÅLGEBRA:
            ‚Ä¢ Equa√ß√£o linear ax + b = c: isole x dividindo por a
            ‚Ä¢ Equa√ß√£o quadr√°tica ax¬≤ + bx + c = 0: use Bhaskara x = (-b ¬± ‚àöŒî)/2a
            ‚Ä¢ Œî = b¬≤ - 4ac determina n√∫mero de solu√ß√µes
            
            GEOMETRIA:
            ‚Ä¢ √Årea ret√¢ngulo: A = base √ó altura
            ‚Ä¢ √Årea tri√¢ngulo: A = (base √ó altura)/2  
            ‚Ä¢ √Årea c√≠rculo: A = œÄr¬≤
            ‚Ä¢ Pit√°goras: a¬≤ + b¬≤ = c¬≤
            
            FUN√á√ïES:
            ‚Ä¢ Linear f(x) = ax + b: reta com inclina√ß√£o a
            ‚Ä¢ Quadr√°tica f(x) = ax¬≤ + bx + c: par√°bola
            ‚Ä¢ V√©rtice: x = -b/2a
            
            F√çSICA - Conceitos Base:
            
            CINEM√ÅTICA:
            ‚Ä¢ MRU: s = s‚ÇÄ + vt
            ‚Ä¢ MRUV: v = v‚ÇÄ + at, s = s‚ÇÄ + v‚ÇÄt + at¬≤/2
            
            DIN√ÇMICA:
            ‚Ä¢ F = ma (2¬™ Lei Newton)
            ‚Ä¢ Peso: P = mg
            
            QU√çMICA - Essencial:
            
            ESTEQUIOMETRIA:
            ‚Ä¢ Mol = 6,02√ó10¬≤¬≥ part√≠culas
            ‚Ä¢ n = m/M (mols = massa/massa molar)
            
            METODOLOGIA:
            1. Identifique o problema
            2. Liste dados e inc√≥gnitas
            3. Escolha f√≥rmulas adequadas
            4. Resolva passo a passo
            5. Verifique o resultado
            """
        )
        
        index = VectorStoreIndex.from_documents([educational_content])
        print("‚úÖ √çndice educacional otimizado criado")
        return index
        
    except Exception as e:
        print(f"‚ùå Erro ao criar √≠ndice: {str(e)}")
        return None

def build_index_from_documents():
    """Constr√≥i √≠ndice otimizado"""
    if not LLAMA_INDEX_AVAILABLE:
        return None
        
    try:
        ensure_directories()
        
        documents = []
        
        # Carregar PDFs educacionais se existirem
        if os.path.exists(UPLOADS_DIR):
            pdf_files = [f for f in os.listdir(UPLOADS_DIR) if f.lower().endswith('.pdf')]
            
            if pdf_files:
                print(f"üìñ Processando {len(pdf_files)} materiais...")
                try:
                    loaded_docs = SimpleDirectoryReader(UPLOADS_DIR).load_data()
                    for doc in loaded_docs:
                        # Texto mais conciso para evitar overflow
                        enhanced_text = f"""
MATERIAL EDUCACIONAL:

CONTE√öDO:
{doc.text[:1000]}  

INSTRU√á√ïES:
- Ensine conceitos detalhadamente
- D√™ f√≥rmulas completas
- Resolva exemplos similares
- Oriente aplica√ß√£o sem dar resultado final
                        """
                        enhanced_doc = Document(text=enhanced_text)
                        documents.append(enhanced_doc)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao processar PDFs: {e}")
        
        # Base educacional sempre inclu√≠da
        base_index = create_optimized_educational_index()
        if base_index:
            base_docs = list(base_index.docstore.docs.values())
            documents.extend(base_docs)
        
        if not documents:
            return create_optimized_educational_index()
        
        # Criar √≠ndice
        index = VectorStoreIndex.from_documents(documents)
        
        # Salvar √≠ndice
        try:
            index.storage_context.persist(persist_dir=PERSIST_DIR)
            print("üíæ √çndice otimizado salvo")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar: {e}")
        
        print(f"‚úÖ Base educacional com {len(documents)} recursos")
        return index
        
    except Exception as e:
        print(f"‚ùå Erro ao construir base: {str(e)}")
        return create_optimized_educational_index()

def get_index():
    """Retorna √≠ndice educacional"""
    global _index
    
    if not LLAMA_INDEX_AVAILABLE:
        return None
    
    if _index is not None:
        return _index
    
    try:
        # Tentar carregar √≠ndice existente
        if os.path.exists(PERSIST_DIR) and os.listdir(PERSIST_DIR):
            print("üìö Carregando base educacional...")
            try:
                storage_context = StorageContext.from_defaults(persist_dir=PERSIST_DIR)
                _index = load_index_from_storage(storage_context)
                print("‚úÖ Base carregada!")
                return _index
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar: {e}")
                print("üîÑ Criando nova base...")
                # Limpar √≠ndice incompat√≠vel
                try:
                    import shutil
                    shutil.rmtree(PERSIST_DIR)
                    ensure_directories()
                except:
                    pass
        
        # Criar nova base
        print("üÜï Criando base educacional...")
        _index = build_index_from_documents()
        return _index
        
    except Exception as e:
        print(f"‚ùå Erro geral: {str(e)}")
        _index = create_optimized_educational_index()
        return _index

def is_educational_query(query: str) -> bool:
    """Verifica√ß√£o para perguntas educacionais"""
    non_educational = [
        'clima hoje', 'temperatura agora', 'not√≠cias atuais',
        'que horas s√£o', 'data de hoje', 'como vai voc√™'
    ]
    
    query_lower = query.lower()
    return not any(term in query_lower for term in non_educational)

def generate_groq_fallback(query: str) -> str:
    """Gera resposta usando apenas Groq direto"""
    if not _groq_client:
        return generate_basic_fallback(query)
    
    try:
        full_prompt = f"""
{OPTIMIZED_EDUCATIONAL_PROMPT}

PERGUNTA DO ESTUDANTE: {query}

Responda seguindo exatamente a estrutura educacional apresentada.
        """
        
        response = _groq_client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[{"role": "user", "content": full_prompt}],
            max_tokens=1500,
            temperature=0.2
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        print(f"‚ùå Erro Groq fallback: {e}")
        return generate_basic_fallback(query)

def generate_basic_fallback(query: str) -> str:
    """Resposta b√°sica quando tudo falha"""
    return f"""
üéì PENSA.AI - SISTEMA EDUCACIONAL

üìö **Sobre sua pergunta**: "{query[:100]}..."

üéØ **METODOLOGIA GERAL**:
1. **IDENTIFIQUE**: Que tipo de problema √©
2. **ORGANIZE**: Dados conhecidos e inc√≥gnitas
3. **APLIQUE**: Conceitos e f√≥rmulas adequadas
4. **RESOLVA**: Passo a passo sistematicamente
5. **VERIFIQUE**: Se o resultado faz sentido

üí° **ESTRAT√âGIA RECOMENDADA**:
- Determine a √°rea de estudo (matem√°tica, f√≠sica, etc.)
- Revise conceitos fundamentais relacionados
- Procure exemplos similares resolvidos
- Aplique metodicamente os procedimentos

üîß **Nota t√©cnica**: Sistema funcionando em modo b√°sico. Para funcionalidade completa, verifique as configura√ß√µes.
    """

def get_response_from_query(query: str) -> str:
    """Gera resposta educacional - VERS√ÉO H√çBRIDA"""
    try:
        print(f"üéì Processando pergunta: {query[:50]}...")
        
        # Verifica√ß√£o educacional
        if not is_educational_query(query):
            return """
üéì Como tutor educacional, foco em quest√µes de aprendizado!

üìö POSSO ENSINAR:
‚Ä¢ Matem√°tica: √°lgebra, geometria, fun√ß√µes
‚Ä¢ F√≠sica: cinem√°tica, din√¢mica, energia
‚Ä¢ Qu√≠mica: estequiometria, solu√ß√µes
‚Ä¢ M√©todos de resolu√ß√£o detalhados

ü§î Reformule para uma pergunta educacional!
            """
        
        # Tentar configurar sistema se ainda n√£o foi
        if not _initialized:
            setup_llama_index()
        
        # OP√á√ÉO 1: Tentar LlamaIndex (preferido)
        if LLAMA_INDEX_AVAILABLE and _initialized:
            index = get_index()
            if index is not None:
                try:
                    # Configurar query engine OTIMIZADO
                    query_engine = index.as_query_engine(
                        similarity_top_k=1,  # Apenas 1 resultado para evitar overflow
                        response_mode="compact"
                    )
                    
                    # Prompt mais conciso
                    optimized_prompt = f"""
{OPTIMIZED_EDUCATIONAL_PROMPT[:500]}

PERGUNTA: {query}

Resposta educacional estruturada:
                    """
                    
                    print("üîÑ Usando LlamaIndex...")
                    response = query_engine.query(optimized_prompt)
                    result = str(response)
                    
                    if len(result) > 200 and "üéØ" in result:
                        print("‚úÖ Resposta LlamaIndex gerada")
                        return result
                    else:
                        print("‚ö†Ô∏è Resposta LlamaIndex inadequada, usando fallback")
                        
                except Exception as e:
                    print(f"‚ùå Erro LlamaIndex: {e}")
        
        # OP√á√ÉO 2: Fallback Groq direto
        print("üîÑ Usando Groq direto...")
        return generate_groq_fallback(query)
        
    except Exception as e:
        print(f"‚ùå Erro geral: {str(e)}")
        return generate_basic_fallback(query)

def update_index():
    """Atualiza base educacional"""
    global _index
    
    if not LLAMA_INDEX_AVAILABLE:
        print("‚ö†Ô∏è LlamaIndex n√£o dispon√≠vel para atualizar")
        return False
    
    try:
        print("üîÑ Atualizando base educacional...")
        
        if not setup_llama_index():
            return False
        
        _index = None
        _index = build_index_from_documents()
        
        success = _index is not None
        print(f"{'‚úÖ' if success else '‚ùå'} Base {'atualizada' if success else 'falhou'}")
        return success
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar: {str(e)}")
        return False

# Inicializa√ß√£o
print("üéì Inicializando Pensa.AI - SISTEMA H√çBRIDO...")
print("üìã CARACTER√çSTICAS:")
print("   ‚úÖ Respostas detalhadas e estruturadas")
print("   ‚úÖ Exemplos resolvidos passo a passo")
print("   ‚úÖ Sistema h√≠brido: LlamaIndex + Groq fallback")
print("   ‚úÖ Otimizado para evitar erros de contexto")
print("   ‚ùå N√ÉO d√° resultado final do problema espec√≠fico")

try:
    if setup_llama_index():
        if LLAMA_INDEX_AVAILABLE:
            ensure_directories()
            get_index()
            print("‚úÖ Sistema H√çBRIDO COMPLETO pronto!")
        else:
            print("‚úÖ Sistema GROQ APENAS pronto!")
    else:
        print("‚ö†Ô∏è Sistema com limita√ß√µes - verifique GROQ_API_KEY")
except Exception as e:
    print(f"‚ùå Erro na inicializa√ß√£o: {e}")