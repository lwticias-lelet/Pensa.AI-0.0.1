import os
import re
from llama_index.core import (
    VectorStoreIndex,
    SimpleDirectoryReader,
    StorageContext,
    Settings,
    Document,
    load_index_from_storage
)
from llama_index.llms.groq import Groq
from dotenv import load_dotenv

# Carrega vari√°veis do arquivo .env
load_dotenv()

# Diret√≥rios usados
PERSIST_DIR = "backend/index"
UPLOADS_DIR = "backend/data/uploads"

# Vari√°veis globais
_index = None
_initialized = False

# PROMPT EDUCACIONAL OTIMIZADO - DETALHADO MAS CONCISO
OPTIMIZED_EDUCATIONAL_PROMPT = """
VOC√ä √â O PENSA.AI - TUTOR EDUCACIONAL ESPECIALISTA

MISS√ÉO: Ensinar detalhadamente com exemplos passo a passo, mas SEM dar o resultado final.

ESTRUTURA OBRIGAT√ìRIA:

üéØ AN√ÅLISE: [Tipo de problema e conceitos envolvidos]

üìö CONCEITOS: [Defini√ß√µes claras e aplica√ß√µes]

üìê F√ìRMULAS: [Todas as f√≥rmulas necess√°rias com explica√ß√£o das vari√°veis]

üõ†Ô∏è M√âTODO PASSO A PASSO:
Passo 1: [O que fazer e como]
Passo 2: [Pr√≥xima etapa]
[Continue conforme necess√°rio]

üìù EXEMPLO RESOLVIDO:
Problema: [Similar mas diferente]
Resolu√ß√£o:
- Dados: [o que temos]
- Aplica√ß√£o: [como resolver]
- C√°lculos: [passo a passo]
- Resultado: [resposta do exemplo]

üìù SEGUNDO EXEMPLO:
[Outro exemplo com resolu√ß√£o completa]

üîÑ VERIFICA√á√ÉO: [Como conferir os resultados]

üéØ PARA SEU PROBLEMA: [Orienta√ß√£o espec√≠fica SEM resolver]

IMPORTANTE: D√™ exemplos COMPLETOS com resultado final, mas N√ÉO resolva o problema espec√≠fico perguntado.
"""

def setup_embedding_model():
    """Configura modelo de embedding local"""
    try:
        from llama_index.embeddings.huggingface import HuggingFaceEmbedding
        
        embed_model = HuggingFaceEmbedding(
            model_name="sentence-transformers/all-MiniLM-L6-v2",
            cache_folder="./embeddings_cache"
        )
        
        Settings.embed_model = embed_model
        print("‚úÖ Embedding local configurado!")
        return True
        
    except ImportError:
        print("‚ö†Ô∏è Usando embedding padr√£o")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no embedding: {e}")
        return True

def setup_llama_index():
    """Configura LlamaIndex otimizado"""
    global _initialized
    
    if _initialized:
        return True
    
    groq_api_key = os.getenv("GROQ_API_KEY")
    
    if not groq_api_key:
        print("‚ùå GROQ_API_KEY n√£o encontrada no arquivo .env")
        return False
    
    try:
        setup_embedding_model()
        
        # Configura√ß√µes OTIMIZADAS para evitar erro de contexto
        llm = Groq(
            model="llama3-8b-8192",  # Modelo mais est√°vel
            api_key=groq_api_key,
            temperature=0.2,
            max_tokens=2048,  # Limite seguro de tokens
            timeout=30,
        )
        
        Settings.llm = llm
        
        # Configura√ß√µes do √≠ndice para respostas mais concisas
        Settings.chunk_size = 512  # Chunks menores
        Settings.chunk_overlap = 50
        
        # Teste de conectividade
        print("üß™ Testando Groq...")
        test_response = llm.complete("Teste r√°pido")
        print("‚úÖ Groq funcionando!")
        
        _initialized = True
        print("‚úÖ Sistema educacional OTIMIZADO configurado!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar: {str(e)}")
        return False

def ensure_directories():
    """Garante diret√≥rios necess√°rios"""
    try:
        directories = [UPLOADS_DIR, PERSIST_DIR, "./embeddings_cache"]
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar diret√≥rios: {str(e)}")
        return False

def create_optimized_educational_index():
    """Cria √≠ndice educacional otimizado"""
    try:
        educational_content = Document(
            text="""
            PENSA.AI - SISTEMA EDUCACIONAL OTIMIZADO
            
            MATEM√ÅTICA - Guia Conciso:
            
            √ÅLGEBRA:
            ‚Ä¢ Equa√ß√£o linear ax + b = c: isole x dividindo por a
            ‚Ä¢ Equa√ß√£o quadr√°tica ax¬≤ + bx + c = 0: use Bhaskara x = (-b ¬± ‚àöŒî)/2a
            ‚Ä¢ Œî = b¬≤ - 4ac determina n√∫mero de solu√ß√µes
            
            GEOMETRIA:
            ‚Ä¢ √Årea ret√¢ngulo: A = base √ó altura
            ‚Ä¢ √Årea tri√¢ngulo: A = (base √ó altura)/2  
            ‚Ä¢ √Årea c√≠rculo: A = œÄr¬≤
            ‚Ä¢ Pit√°goras: a¬≤ + b¬≤ = c¬≤
            
            FUN√á√ïES:
            ‚Ä¢ Linear f(x) = ax + b: reta com inclina√ß√£o a
            ‚Ä¢ Quadr√°tica f(x) = ax¬≤ + bx + c: par√°bola
            ‚Ä¢ V√©rtice: x = -b/2a
            
            F√çSICA - Conceitos Base:
            
            CINEM√ÅTICA:
            ‚Ä¢ MRU: s = s‚ÇÄ + vt
            ‚Ä¢ MRUV: v = v‚ÇÄ + at, s = s‚ÇÄ + v‚ÇÄt + at¬≤/2
            
            DIN√ÇMICA:
            ‚Ä¢ F = ma (2¬™ Lei Newton)
            ‚Ä¢ Peso: P = mg
            
            QU√çMICA - Essencial:
            
            ESTEQUIOMETRIA:
            ‚Ä¢ Mol = 6,02√ó10¬≤¬≥ part√≠culas
            ‚Ä¢ n = m/M (mols = massa/massa molar)
            
            METODOLOGIA:
            1. Identifique o problema
            2. Liste dados e inc√≥gnitas
            3. Escolha f√≥rmulas adequadas
            4. Resolva passo a passo
            5. Verifique o resultado
            """
        )
        
        index = VectorStoreIndex.from_documents([educational_content])
        print("‚úÖ √çndice educacional otimizado criado")
        return index
        
    except Exception as e:
        print(f"‚ùå Erro ao criar √≠ndice: {str(e)}")
        return None

def build_index_from_documents():
    """Constr√≥i √≠ndice otimizado"""
    try:
        ensure_directories()
        
        documents = []
        
        # Carregar PDFs educacionais
        if os.path.exists(UPLOADS_DIR):
            pdf_files = [f for f in os.listdir(UPLOADS_DIR) if f.lower().endswith('.pdf')]
            
            if pdf_files:
                print(f"üìñ Processando {len(pdf_files)} materiais...")
                try:
                    loaded_docs = SimpleDirectoryReader(UPLOADS_DIR).load_data()
                    for doc in loaded_docs:
                        # Texto mais conciso para evitar overflow
                        enhanced_text = f"""
MATERIAL EDUCACIONAL:

CONTE√öDO:
{doc.text[:2000]}  

INSTRU√á√ïES:
- Ensine conceitos detalhadamente
- D√™ f√≥rmulas completas
- Resolva exemplos similares
- Oriente aplica√ß√£o sem dar resultado final
                        """
                        enhanced_doc = Document(text=enhanced_text)
                        documents.append(enhanced_doc)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao processar PDFs: {e}")
        
        # Base educacional
        base_index = create_optimized_educational_index()
        if base_index:
            base_docs = list(base_index.docstore.docs.values())
            documents.extend(base_docs)
        
        if not documents:
            return create_optimized_educational_index()
        
        # Criar √≠ndice
        index = VectorStoreIndex.from_documents(documents)
        
        # Salvar √≠ndice
        try:
            index.storage_context.persist(persist_dir=PERSIST_DIR)
            print("üíæ √çndice otimizado salvo")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar: {e}")
        
        print(f"‚úÖ Base educacional otimizada com {len(documents)} recursos")
        return index
        
    except Exception as e:
        print(f"‚ùå Erro ao construir base: {str(e)}")
        return create_optimized_educational_index()

def get_index():
    """Retorna √≠ndice educacional"""
    global _index
    
    if _index is not None:
        return _index
    
    try:
        # Tentar carregar √≠ndice existente
        if os.path.exists(PERSIST_DIR) and os.listdir(PERSIST_DIR):
            print("üìö Carregando base educacional...")
            try:
                storage_context = StorageContext.from_defaults(persist_dir=PERSIST_DIR)
                _index = load_index_from_storage(storage_context)
                print("‚úÖ Base carregada!")
                return _index
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar: {e}")
                print("üîÑ Criando nova base...")
                # Limpar √≠ndice incompat√≠vel
                try:
                    import shutil
                    shutil.rmtree(PERSIST_DIR)
                    ensure_directories()
                except:
                    pass
        
        # Criar nova base
        print("üÜï Criando base educacional otimizada...")
        _index = build_index_from_documents()
        return _index
        
    except Exception as e:
        print(f"‚ùå Erro geral: {str(e)}")
        _index = create_optimized_educational_index()
        return _index

def is_educational_query(query: str) -> bool:
    """Verifica√ß√£o para perguntas educacionais"""
    non_educational = [
        'clima hoje', 'temperatura agora', 'not√≠cias atuais',
        'que horas s√£o', 'data de hoje'
    ]
    
    query_lower = query.lower()
    return not any(term in query_lower for term in non_educational)

def generate_detailed_response(query: str) -> str:
    """Gera resposta detalhada de forma estruturada"""
    
    # Identifica tipo de problema
    if any(word in query.lower() for word in ['fun√ß√£o', 'gr√°fico', 'par√°bola', 'reta']):
        return generate_function_response(query)
    elif any(word in query.lower() for word in ['equa√ß√£o', 'resolver', 'x=']):
        return generate_equation_response(query)
    elif any(word in query.lower() for word in ['√°rea', 'per√≠metro', 'volume']):
        return generate_geometry_response(query)
    else:
        return generate_general_response(query)

def generate_function_response(query: str) -> str:
    """Resposta espec√≠fica para fun√ß√µes"""
    return f"""
üéØ AN√ÅLISE DO PROBLEMA: {query}

Este √© um problema de FUN√á√ÉO que envolve an√°lise gr√°fica e c√°lculo de retas.

üìö CONCEITOS FUNDAMENTAIS:
‚Ä¢ Fun√ß√£o Quadr√°tica: f(x) = ax¬≤ + bx + c (par√°bola)
‚Ä¢ Reta Secante: liga dois pontos da curva
‚Ä¢ Coeficiente Angular: m = (y‚ÇÇ-y‚ÇÅ)/(x‚ÇÇ-x‚ÇÅ)

üìê F√ìRMULAS NECESS√ÅRIAS:
‚Ä¢ V√©rtice da par√°bola: x = -b/2a
‚Ä¢ Equa√ß√£o da reta: y - y‚ÇÅ = m(x - x‚ÇÅ)
‚Ä¢ Ponto da fun√ß√£o: y = f(x)

üõ†Ô∏è M√âTODO PASSO A PASSO:
Passo 1: Verifique se o ponto pertence √† fun√ß√£o
Passo 2: Calcule outros pontos da fun√ß√£o
Passo 3: Desenhe o gr√°fico da fun√ß√£o
Passo 4: Escolha pontos para as secantes
Passo 5: Calcule coeficientes angulares
Passo 6: Encontre equa√ß√µes das retas
Passo 7: Desenhe as retas secantes

üìù EXEMPLO RESOLVIDO:
Problema: f(x) = x¬≤ - 2x, ponto A(1,-1)

Verifica√ß√£o: f(1) = 1¬≤ - 2(1) = 1 - 2 = -1 ‚úì

Outros pontos:
‚Ä¢ f(0) = 0 - 0 = 0 ‚Üí (0,0)
‚Ä¢ f(2) = 4 - 4 = 0 ‚Üí (2,0)  
‚Ä¢ f(3) = 9 - 6 = 3 ‚Üí (3,3)

Reta secante A(1,-1) e B(3,3):
‚Ä¢ m = (3-(-1))/(3-1) = 4/2 = 2
‚Ä¢ y - (-1) = 2(x - 1)
‚Ä¢ y = 2x - 3

üìù SEGUNDO EXEMPLO:
Fun√ß√£o g(x) = -x¬≤ + 4x, ponto C(1,3)

Verifica√ß√£o: g(1) = -1 + 4 = 3 ‚úì

Reta secante C(1,3) e D(2,4):
‚Ä¢ g(2) = -4 + 8 = 4
‚Ä¢ m = (4-3)/(2-1) = 1
‚Ä¢ y = x + 2

üîÑ VERIFICA√á√ÉO:
‚Ä¢ Substitua pontos nas equa√ß√µes das retas
‚Ä¢ Confira que passam pelos pontos corretos
‚Ä¢ Desenhe para verificar visualmente

üéØ PARA SEU PROBLEMA:
1. Verifique se o ponto dado pertence √† fun√ß√£o
2. Calcule valores da fun√ß√£o para outros x
3. Escolha pontos para as secantes
4. Use m = (y‚ÇÇ-y‚ÇÅ)/(x‚ÇÇ-x‚ÇÅ) para cada reta
5. Encontre as equa√ß√µes na forma y = mx + b
6. Desenhe tudo no mesmo gr√°fico

Agora voc√™ tem o m√©todo completo para resolver!
    """

def generate_equation_response(query: str) -> str:
    """Resposta espec√≠fica para equa√ß√µes"""
    return f"""
üéØ AN√ÅLISE DO PROBLEMA: {query}

Este √© um problema de EQUA√á√ÉO que requer t√©cnicas alg√©bricas.

üìö CONCEITOS FUNDAMENTAIS:
‚Ä¢ Equa√ß√£o: igualdade com inc√≥gnita
‚Ä¢ Solu√ß√£o: valor que satisfaz a equa√ß√£o
‚Ä¢ Opera√ß√µes inversas: +/-, √ó/√∑, pot√™ncia/raiz

üìê F√ìRMULAS NECESS√ÅRIAS:
‚Ä¢ Linear: ax + b = c ‚Üí x = (c-b)/a
‚Ä¢ Quadr√°tica: ax¬≤ + bx + c = 0 ‚Üí x = (-b ¬± ‚àöŒî)/2a
‚Ä¢ Œî = b¬≤ - 4ac (discriminante)

üõ†Ô∏è M√âTODO PASSO A PASSO:
Passo 1: Identifique o tipo de equa√ß√£o
Passo 2: Organize termos (x de um lado)
Passo 3: Aplique opera√ß√µes inversas
Passo 4: Calcule o resultado
Passo 5: Verifique substituindo

üìù EXEMPLO RESOLVIDO:
Problema: 3x + 7 = 22

Resolu√ß√£o:
‚Ä¢ 3x = 22 - 7
‚Ä¢ 3x = 15
‚Ä¢ x = 15/3
‚Ä¢ x = 5

Verifica√ß√£o: 3(5) + 7 = 15 + 7 = 22 ‚úì

üìù SEGUNDO EXEMPLO:
Problema: x¬≤ - 5x + 6 = 0

Resolu√ß√£o:
‚Ä¢ a = 1, b = -5, c = 6
‚Ä¢ Œî = (-5)¬≤ - 4(1)(6) = 25 - 24 = 1
‚Ä¢ x = (5 ¬± ‚àö1)/2 = (5 ¬± 1)/2
‚Ä¢ x‚ÇÅ = 6/2 = 3, x‚ÇÇ = 4/2 = 2

Verifica√ß√£o: 3¬≤ - 5(3) + 6 = 9 - 15 + 6 = 0 ‚úì

üîÑ VERIFICA√á√ÉO:
‚Ä¢ Substitua a solu√ß√£o na equa√ß√£o original
‚Ä¢ O resultado deve ser verdadeiro
‚Ä¢ Para quadr√°ticas, teste ambas as ra√≠zes

üéØ PARA SEU PROBLEMA:
1. Identifique se √© linear ou quadr√°tica
2. Organize os termos adequadamente
3. Aplique a f√≥rmula correspondente
4. Execute os c√°lculos passo a passo
5. Sempre verifique o resultado

Use este m√©todo para resolver sua equa√ß√£o!
    """

def generate_geometry_response(query: str) -> str:
    """Resposta espec√≠fica para geometria"""
    return f"""
üéØ AN√ÅLISE DO PROBLEMA: {query}

Este √© um problema de GEOMETRIA que envolve c√°lculos de medidas.

üìö CONCEITOS FUNDAMENTAIS:
‚Ä¢ √Årea: medida da superf√≠cie (unidade¬≤)
‚Ä¢ Per√≠metro: medida do contorno (unidade)
‚Ä¢ Volume: medida do espa√ßo (unidade¬≥)

üìê F√ìRMULAS NECESS√ÅRIAS:
‚Ä¢ Ret√¢ngulo: A = b√óh, P = 2(b+h)
‚Ä¢ Tri√¢ngulo: A = (b√óh)/2, P = a+b+c
‚Ä¢ C√≠rculo: A = œÄr¬≤, P = 2œÄr
‚Ä¢ Cubo: V = a¬≥, A = 6a¬≤

üõ†Ô∏è M√âTODO PASSO A PASSO:
Passo 1: Identifique a figura geom√©trica
Passo 2: Liste as medidas conhecidas
Passo 3: Escolha a f√≥rmula adequada
Passo 4: Substitua os valores
Passo 5: Calcule o resultado com unidades

üìù EXEMPLO RESOLVIDO:
Problema: √Årea de um ret√¢ngulo 8cm √ó 5cm

Resolu√ß√£o:
‚Ä¢ Base = 8cm, Altura = 5cm
‚Ä¢ A = base √ó altura
‚Ä¢ A = 8 √ó 5 = 40 cm¬≤

üìù SEGUNDO EXEMPLO:
Problema: √Årea de c√≠rculo com raio 3cm

Resolu√ß√£o:
‚Ä¢ r = 3cm
‚Ä¢ A = œÄr¬≤
‚Ä¢ A = œÄ √ó 3¬≤ = 9œÄ ‚âà 28,3 cm¬≤

üîÑ VERIFICA√á√ÉO:
‚Ä¢ Confira as unidades (√°rea em unidade¬≤)
‚Ä¢ Verifique se o resultado √© razo√°vel
‚Ä¢ Refa√ßa com f√≥rmula alternativa se poss√≠vel

üéØ PARA SEU PROBLEMA:
1. Identifique que medida calcular
2. Reconhe√ßa a figura geom√©trica
3. Use a f√≥rmula correspondente
4. Substitua valores com cuidado
5. Inclua unidades no resultado

Aplique este m√©todo na sua quest√£o!
    """

def generate_general_response(query: str) -> str:
    """Resposta geral estruturada"""
    return f"""
üéØ AN√ÅLISE DO PROBLEMA: {query}

Vou ensinar o m√©todo geral para resolver este tipo de problema.

üìö CONCEITOS FUNDAMENTAIS:
Identifique os conceitos envolvidos na sua quest√£o para aplicar a teoria correta.

üìê F√ìRMULAS NECESS√ÅRIAS:
Determine quais f√≥rmulas e m√©todos s√£o adequados para seu problema espec√≠fico.

üõ†Ô∏è M√âTODO PASSO A PASSO:
Passo 1: Leia e compreenda completamente
Passo 2: Identifique dados e inc√≥gnitas
Passo 3: Escolha estrat√©gia adequada
Passo 4: Execute sistematicamente
Passo 5: Verifique o resultado

üìù EXEMPLO GERAL:
Para qualquer problema educacional:
‚Ä¢ Organize informa√ß√µes claramente
‚Ä¢ Aplique conceitos fundamentais
‚Ä¢ Use f√≥rmulas adequadas
‚Ä¢ Calcule passo a passo
‚Ä¢ Confira o resultado

üîÑ VERIFICA√á√ÉO:
‚Ä¢ Substitua resultado no problema original
‚Ä¢ Analise se faz sentido pr√°tico
‚Ä¢ Use m√©todo alternativo se poss√≠vel

üéØ PARA SEU PROBLEMA:
Aplique esta metodologia sistem√°tica na sua quest√£o espec√≠fica, seguindo cada etapa cuidadosamente.
    """

def get_response_from_query(query: str) -> str:
    """Gera resposta educacional otimizada"""
    try:
        print(f"üéì Processando pergunta: {query[:50]}...")
        
        # Verifica√ß√£o educacional
        if not is_educational_query(query):
            return """
üéì Como tutor educacional, foco em quest√µes de aprendizado!

üìö POSSO ENSINAR:
‚Ä¢ Matem√°tica: √°lgebra, geometria, fun√ß√µes
‚Ä¢ F√≠sica: cinem√°tica, din√¢mica, energia
‚Ä¢ Qu√≠mica: estequiometria, solu√ß√µes
‚Ä¢ M√©todos de resolu√ß√£o detalhados

ü§î Reformule para uma pergunta educacional!
            """
        
        # Verificar sistema
        if not setup_llama_index():
            return generate_detailed_response(query)
        
        # Obter base de conhecimento
        index = get_index()
        if index is None:
            return generate_detailed_response(query)
        
        # Configurar query engine OTIMIZADO
        query_engine = index.as_query_engine(
            similarity_top_k=2,  # Menos contexto para evitar overflow
            response_mode="compact",  # Modo mais conciso
            streaming=False
        )
        
        # Prompt otimizado e mais curto
        optimized_prompt = f"""
{OPTIMIZED_EDUCATIONAL_PROMPT}

PERGUNTA: {query}

D√™ uma resposta educacional detalhada mas concisa, com exemplos resolvidos.
        """
        
        print("üîÑ Gerando resposta educacional...")
        
        try:
            response = query_engine.query(optimized_prompt)
            result = str(response)
            
            # Se resposta muito curta, usar fallback
            if len(result) < 200:
                result = generate_detailed_response(query)
            
            print("‚úÖ Resposta educacional gerada")
            return result
            
        except Exception as e:
            print(f"‚ùå Erro na consulta: {e}")
            return generate_detailed_response(query)
        
    except Exception as e:
        print(f"‚ùå Erro geral: {str(e)}")
        return generate_detailed_response(query)

def update_index():
    """Atualiza base educacional"""
    global _index
    
    try:
        print("üîÑ Atualizando base educacional...")
        
        if not setup_llama_index():
            return False
        
        _index = None
        _index = build_index_from_documents()
        
        success = _index is not None
        print(f"{'‚úÖ' if success else '‚ùå'} Base {'atualizada' if success else 'falhou'}")
        return success
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar: {str(e)}")
        return False

# Inicializa√ß√£o otimizada
print("üéì Inicializando Pensa.AI - SISTEMA OTIMIZADO...")
print("üìã CARACTER√çSTICAS:")
print("   ‚úÖ Respostas detalhadas e estruturadas")
print("   ‚úÖ Exemplos resolvidos passo a passo")
print("   ‚úÖ M√∫ltiplas estrat√©gias de ensino")
print("   ‚úÖ Otimizado para evitar erros de contexto")
print("   ‚ùå N√ÉO d√° resultado final do problema espec√≠fico")

try:
    if setup_llama_index():
        ensure_directories()
        get_index()
        print("‚úÖ Sistema EDUCACIONAL OTIMIZADO pronto!")
    else:
        print("‚ö†Ô∏è Sistema com limita√ß√µes - verifique GROQ_API_KEY")
except Exception as e:
    print(f"‚ùå Erro na inicializa√ß√£o: {e}")
    