// Configura√ß√£o da API
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

// Detecta mat√©ria baseada na mensagem
export const detectSubject = (message) => {
  const subjects = {
    'matem√°tica': ['fun√ß√£o', 'equa√ß√£o', 'derivada', 'integral', '√°lgebra', 'geometria', 'trigonometria', 'c√°lculo'],
    'f√≠sica': ['for√ßa', 'energia', 'movimento', 'velocidade', 'acelera√ß√£o', 'gravidade', 'onda', 'luz'],
    'qu√≠mica': ['√°tomo', 'mol√©cula', 'rea√ß√£o', 'liga√ß√£o', 'elemento', 'tabela peri√≥dica', 'ph', '√°cido'],
    'biologia': ['c√©lula', 'dna', 'evolu√ß√£o', 'fotoss√≠ntese', 'respira√ß√£o', 'reprodu√ß√£o', 'gen√©tica'],
    'hist√≥ria': ['guerra', 'revolu√ß√£o', 'imp√©rio', 's√©culo', 'civiliza√ß√£o', 'cultura', 'brasil'],
    'geografia': ['clima', 'relevo', 'popula√ß√£o', 'pa√≠s', 'continente', 'oceano', 'cidade'],
    'portugu√™s': ['verbo', 'substantivo', 'sintaxe', 'literatura', 'texto', 'gram√°tica', 'reda√ß√£o'],
    'ingl√™s': ['verb', 'noun', 'grammar', 'vocabulary', 'pronunciation', 'english']
  };

  const messageLower = message.toLowerCase();
  for (const [subject, keywords] of Object.entries(subjects)) {
    if (keywords.some(keyword => messageLower.includes(keyword))) {
      return subject;
    }
  }
  return 'geral';
};

// Emoji para cada mat√©ria
export const getSubjectEmoji = (subject) => {
  const emojis = {
    'matem√°tica': 'üìä',
    'f√≠sica': '‚ö°',
    'qu√≠mica': 'üß™',
    'biologia': 'üå±',
    'hist√≥ria': 'üìö',
    'geografia': 'üåç',
    'portugu√™s': 'üìù',
    'ingl√™s': 'üá∫üá∏',
    'geral': 'ü§ñ'
  };
  return emojis[subject] || 'ü§ñ';
};

// Upload de arquivo para o backend
export const uploadFile = async (file) => {
  try {
    const formData = new FormData();
    formData.append('file', file);

    const response = await fetch(`${API_BASE_URL}/upload`, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.detail || 'Erro no upload do arquivo');
    }

    const result = await response.json();
    return result;
  } catch (error) {
    console.error('Erro no upload:', error);
    throw error;
  }
};

// Verifica status do backend
export const checkBackendHealth = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/health`);
    if (response.ok) {
      return await response.json();
    }
    return null;
  } catch (error) {
    console.error('Backend n√£o dispon√≠vel:', error);
    return null;
  }
};

// Gera resposta da IA - INTEGRADO COM BACKEND
export const getAIResponse = async (message) => {
  try {
    // Primeiro tenta usar o backend
    const response = await fetch(`${API_BASE_URL}/chat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        question: message
      }),
    });

    if (response.ok) {
      const data = await response.json();
      return data.answer;
    } else {
      console.warn('Backend indispon√≠vel, usando fallback');
      throw new Error('Backend error');
    }
  } catch (error) {
    console.error('Erro ao conectar com backend:', error);
    
    // Fallback para resposta local se backend falhar
    const subject = detectSubject(message);
    const emoji = getSubjectEmoji(subject);

    const fallbackResponses = [
      `${emoji} **[MODO OFFLINE]** Interessante! Me conte: o que voc√™ j√° sabe sobre esse assunto?`,
      `${emoji} **[MODO OFFLINE]** √ìtima pergunta! Qual seria o primeiro passo para resolver isso?`,
      `${emoji} **[MODO OFFLINE]** Vamos pensar juntos. Como voc√™ aplicaria isso na pr√°tica?`,
      `${emoji} **[MODO OFFLINE]** Voc√™ est√° no caminho certo! Que tal conectar com algo que j√° conhece?`,
      `${emoji} **[MODO OFFLINE]** Excelente! Qual seria o pr√≥ximo passo l√≥gico aqui?`,
    ];

    // Simula delay mesmo no fallback
    await new Promise(resolve => setTimeout(resolve, 1000));

    let response = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
    
    response += '\n\n‚ö†Ô∏è **Nota**: O backend est√° indispon√≠vel. Conecte-se √† internet e verifique se o servidor est√° rodando para funcionalidade completa.';

    return response;
  }
};